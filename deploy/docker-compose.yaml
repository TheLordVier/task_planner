version: "3.8"

services:

  db:
    image: postgres:15.1-alpine
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    restart: always
    container_name: pgdb
    volumes:
      - pg_data:/var/lib/postgresql/data/
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}" ]
      interval: 5s
      timeout: 5s
      retries: 10

  frontend:
    image: sermalenk/skypro-front:lesson-34
    restart: always
    depends_on:
      api:
        condition: service_started
    ports:
      - "80:80"

  api:
    build:
      context: ..
      dockerfile: Dockerfile
    restart: always
    env_file: .env
    depends_on:
      db:
        condition: service_healthy
      migrations:
        condition: service_completed_successfully
    ports:
      - "8000:8000"

  migrations:
    build:
      context: ..
      dockerfile: Dockerfile
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - .env
    command: >
      sh -c "python ./manage.py migrate"
  

#  db:
#    image: postgres:15.1-alpine
#    restart: always
#    env_file:
#      - .env
#    ports:
#      - "5432:5432"
##    environment:
##      POSTGRES_USER: ${DB_USER}
##      POSTGRES_PASSWORD: ${DB_PASSWORD}
##      POSTGRES_DB: ${DB_NAME}
#    volumes:
#      - pg_data:/var/lib/postgresql/data
#    healthcheck:
#      test: ["CMD-SHELL", "pg_isready -U postgres -d todolist_db"]
##      test: pg_isready -U ${DB_USER} -d ${DB_NAME}
#      timeout: 3s
#      interval: 5s
#      retries: 10

volumes:
  pg_data: